<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:ss="clr-namespace:System.Security;assembly=mscorlib" xmlns:uaa="clr-namespace:UiPath.Azure.Activities;assembly=UiPath.Azure.Activities" xmlns:uac="clr-namespace:UiPath.Azure.Core;assembly=UiPath.Azure" xmlns:uam="clr-namespace:UiPath.Azure.Models;assembly=UiPath.Azure" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ResourceGroup_Name" Type="InArgument(x:String)" />
    <x:Property Name="in_VM_Name" Type="InArgument(x:String)" />
    <x:Property Name="in_Action_StartStopDeallocateDelete" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1159,5682</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Azure.Models</x:String>
      <x:String>System.Security</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Azure</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.Security.SecureString</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence DisplayName="Main Sequence" sap:VirtualizedContainerService.HintSize="913,5517" sap2010:WorkflowViewState.IdRef="Sequence_3">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="Azure_TenantId" />
      <Variable x:TypeArguments="x:String" Name="Azure_ClientId" />
      <Variable x:TypeArguments="x:String" Name="Azure_ClientSecret" />
      <Variable x:TypeArguments="x:String" Name="Azure_SubscriptionID" />
      <Variable x:TypeArguments="uam:VirtualMachine" Name="VM_Object" />
      <Variable x:TypeArguments="x:Boolean" Name="getAssetsFromOrchestrator" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:Comment sap:VirtualizedContainerService.HintSize="871,228" sap2010:WorkflowViewState.IdRef="Comment_1" Text="// Snippet used to perform the following actions for Azure VM:&#xA;&#xA;-deallocate&#xA;&#xA;-start&#xA;&#xA;-stop&#xA;&#xA;-delete" />
    <Assign sap2010:Annotation.AnnotationText="When the variable getAssetsFromOrchestrator has the value true, we will take the credentials for azure connection from the orchestrator assets, when it is false you have to enter them manually (else branch of the next if). &#xA;Please change the value of the variable according to your needs." sap:VirtualizedContainerService.HintSize="871,192" sap2010:WorkflowViewState.IdRef="Assign_3">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Boolean">[getAssetsFromOrchestrator]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <If Condition="[getAssetsFromOrchestrator]" DisplayName="If you want to get your information from orchestrator assets" sap:VirtualizedContainerService.HintSize="871,1249" sap2010:WorkflowViewState.IdRef="If_4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <TryCatch DisplayName="Try Get Assets from Orchestrator " sap:VirtualizedContainerService.HintSize="438,1101" sap2010:WorkflowViewState.IdRef="TryCatch_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <TryCatch.Try>
            <Sequence DisplayName="Get Azure Credentials from Assets Sequence" sap:VirtualizedContainerService.HintSize="376,631" sap2010:WorkflowViewState.IdRef="Sequence_12">
              <Sequence.Variables>
                <Variable x:TypeArguments="ss:SecureString" Name="azure_clientsecret_secure" />
                <Variable x:TypeArguments="ss:SecureString" Name="azure_clientid_secure" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Retrieving Azure credentials from Orchestrator Assets..&quot;]" />
              <ui:GetRobotCredential TimeoutMS="{x:Null}" Username="{x:Null}" AssetName="ITA_Azure_ClientID" DisplayName="Azure ClientID - Get Credential" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="GetRobotCredential_3" Password="[azure_clientid_secure]" />
              <ui:GetRobotCredential TimeoutMS="{x:Null}" Username="{x:Null}" AssetName="ITA_Azure_ClientSecret" DisplayName="Azure ClientSecret - Get Credential" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="GetRobotCredential_4" Password="[azure_clientsecret_secure]" />
              <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="ITA_Azure_SubscriptionID" DisplayName="Azure SubscriptionID - Get Asset" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="GetRobotAsset_3">
                <ui:GetRobotAsset.Value>
                  <OutArgument x:TypeArguments="x:String">[Azure_SubscriptionID]</OutArgument>
                </ui:GetRobotAsset.Value>
              </ui:GetRobotAsset>
              <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="ITA_Azure_TenantID" DisplayName="Azure TenantID - Get Asset" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="GetRobotAsset_4">
                <ui:GetRobotAsset.Value>
                  <OutArgument x:TypeArguments="x:String">[Azure_TenantId]</OutArgument>
                </ui:GetRobotAsset.Value>
              </ui:GetRobotAsset>
              <Assign DisplayName=" Assign Azure_ClientId" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[Azure_ClientId]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[new System.Net.NetworkCredential(string.Empty, azure_clientid_secure).Password]</InArgument>
                </Assign.Value>
              </Assign>
              <Assign DisplayName="Assign Azure_ClientSecret" sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[Azure_ClientSecret]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[new System.Net.NetworkCredential(string.Empty, azure_clientsecret_secure).Password]</InArgument>
                </Assign.Value>
              </Assign>
            </Sequence>
          </TryCatch.Try>
          <TryCatch.Catches>
            <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,160" sap2010:WorkflowViewState.IdRef="Catch`1_3">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ActivityAction x:TypeArguments="s:Exception">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                </ActivityAction.Argument>
                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Error" Message="[&quot;An exception occurred when trying to get assets from the orchestrator.&quot;  + vbNewLine  + &quot;Exception: &quot; + exception.ToString]" />
              </ActivityAction>
            </Catch>
          </TryCatch.Catches>
        </TryCatch>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Manual completion of values Sequence" sap:VirtualizedContainerService.HintSize="380,471" sap2010:WorkflowViewState.IdRef="Sequence_13">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="338,91" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;We use manually entered data to connect to Azure Portal&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <ui:MultipleAssign sap2010:Annotation.AnnotationText="Replace the data to the right of the assignment operations with the values you use to connect to Azure portal" DisplayName="MultipleAssign for  Azure connection credentials" sap:VirtualizedContainerService.HintSize="338,248" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
            <ui:MultipleAssign.AssignOperations>
              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[Azure_ClientId]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">AzureClientId</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[Azure_ClientSecret]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">AzureClientSecret</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[Azure_SubscriptionID]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">AzureSubscriptionID</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="x:String">[Azure_TenantId]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="x:String">AzureTenantId</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
              </scg:List>
            </ui:MultipleAssign.AssignOperations>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:MultipleAssign>
        </Sequence>
      </If.Else>
    </If>
    <uaa:AzureScope ClientId="[Azure_ClientId]" ClientSecret="[new System.Net.NetworkCredential(&quot;&quot;,Azure_ClientSecret).SecurePassword]" DisplayName="Get VM - Azure Scope" EnvironmentType="Global" sap:VirtualizedContainerService.HintSize="871,1124" sap2010:WorkflowViewState.IdRef="AzureScope_2" SubscriptionId="[Azure_SubscriptionID]" TenantId="[Azure_TenantId]">
      <uaa:AzureScope.Body>
        <ActivityAction x:TypeArguments="uac:AzureCmd">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="uac:AzureCmd" Name="AzureScopePropertyTag" />
          </ActivityAction.Argument>
          <Sequence DisplayName="Azure Get VM - Do" sap:VirtualizedContainerService.HintSize="480,1038" sap2010:WorkflowViewState.IdRef="Sequence_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="438,91" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;Getting VM  &quot;+in_VM_Name + &quot;  from resource group &quot; + in_ResourceGroup_Name+ &quot;  ..&quot;]" />
            <TryCatch DisplayName="GetVM - Try Catch" sap:VirtualizedContainerService.HintSize="438,684" sap2010:WorkflowViewState.IdRef="TryCatch_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <TryCatch.Try>
                <uaa:AzureGetVirtualMachine DisplayName="Get VM" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="AzureGetVirtualMachine_2" ResourceGroupName="[in_ResourceGroup_Name]" VirtualMachine="[VM_Object]" VirtualMachineName="[in_VM_Name]" />
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,314" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <Sequence sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_14">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TerminateWorkflow DisplayName="Terminate Workflow" Exception="[exception]" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="TerminateWorkflow_2" Reason="[&quot;VM  &quot;+in_VM_Name +&quot;  from Resource Group  &quot; + in_ResourceGroup_Name + &quot;  not found.&quot;]" />
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Error" Message="[&quot;An exception occured when trying to get VM  &quot;+in_VM_Name + &quot;  from resource group &quot; + in_ResourceGroup_Name+ &quot;  ..&quot;]">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:LogMessage>
                    </Sequence>
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
            </TryCatch>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="438,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;VM  &quot; + VM_Object.Name + &quot;  info retrieved..&quot;]" />
          </Sequence>
        </ActivityAction>
      </uaa:AzureScope.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </uaa:AzureScope>
    <Switch x:TypeArguments="x:String" DisplayName="VM Action - Switch" Expression="[in_Action_StartStopDeallocateDelete.ToLower.Trim]" sap:VirtualizedContainerService.HintSize="871,2472" sap2010:WorkflowViewState.IdRef="Switch`1_1">
      <Switch.Default>
        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Warn" Message="[&quot;Action &lt;&quot; + in_Action_StartStopDeallocateDelete + &quot;&gt; not available.&quot;]" />
      </Switch.Default>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <uaa:AzureScope x:Key="deallocate" ClientId="[Azure_ClientId]" ClientSecret="[new System.Net.NetworkCredential(&quot;&quot;,Azure_ClientSecret).SecurePassword]" DisplayName="Deallocate specified VM - Azure Scope" EnvironmentType="Global" sap:VirtualizedContainerService.HintSize="831,570" sap2010:WorkflowViewState.IdRef="AzureScope_6" SubscriptionId="[Azure_SubscriptionID]" TenantId="[Azure_TenantId]">
        <uaa:AzureScope.Body>
          <ActivityAction x:TypeArguments="uac:AzureCmd">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="uac:AzureCmd" Name="AzureScopePropertyTag" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Azure deallocate VM - Do" sap:VirtualizedContainerService.HintSize="797,484" sap2010:WorkflowViewState.IdRef="Sequence_11">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[VM_Object.PowerState.ToString IsNot VmPowerState.Deallocated.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Deallocating.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Stopped.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Stopping.ToString]" DisplayName="If not already deallocated or stopped " sap:VirtualizedContainerService.HintSize="755,392" sap2010:WorkflowViewState.IdRef="If_3">
                <If.Then>
                  <Sequence DisplayName="Sequence Stop VM" sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_10">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <uaa:AzureStopVirtualMachine DisplayName="Stop VM" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="AzureStopVirtualMachine_2" ReservePublicIpAddress="True" Timeout="[600]" VirtualMachine="[VM_Object]" WaitForCompletion="False" />
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  deallocated.&quot;]" />
                  </Sequence>
                </If.Then>
                <If.Else>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  is already deallocated / deallocationg / stopped / stopping.&quot;]" />
                </If.Else>
              </If>
            </Sequence>
          </ActivityAction>
        </uaa:AzureScope.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </uaa:AzureScope>
      <uaa:AzureScope x:Key="start" ClientId="[Azure_ClientId]" ClientSecret="[new System.Net.NetworkCredential(&quot;&quot;,Azure_ClientSecret).SecurePassword]" DisplayName="Start specified VM - Azure Scope" EnvironmentType="Global" sap:VirtualizedContainerService.HintSize="789,478" sap2010:WorkflowViewState.IdRef="AzureScope_4" SubscriptionId="[Azure_SubscriptionID]" TenantId="[Azure_TenantId]">
        <uaa:AzureScope.Body>
          <ActivityAction x:TypeArguments="uac:AzureCmd">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="uac:AzureCmd" Name="AzureScopePropertyTag" />
            </ActivityAction.Argument>
            <If Condition="[VM_Object.PowerState.ToString IsNot VmPowerState.Running.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Starting.ToString]" DisplayName="If not already started" sap:VirtualizedContainerService.HintSize="755,392" sap2010:WorkflowViewState.IdRef="If_1">
              <If.Then>
                <Sequence DisplayName="Sequence Start VM" sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_7">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <uaa:AzureStartVirtualMachine DisplayName="Start VM" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="AzureStartVirtualMachine_1" Timeout="[600]" VirtualMachine="[VM_Object]" WaitForCompletion="False" />
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  started.&quot;]" />
                </Sequence>
              </If.Then>
              <If.Else>
                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  is already started or starting.&quot;]" />
              </If.Else>
            </If>
          </ActivityAction>
        </uaa:AzureScope.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </uaa:AzureScope>
      <uaa:AzureScope x:Key="stop" ClientId="[Azure_ClientId]" ClientSecret="[new System.Net.NetworkCredential(&quot;&quot;,Azure_ClientSecret).SecurePassword]" DisplayName="Stop specified VM - Azure Scope" EnvironmentType="Global" sap:VirtualizedContainerService.HintSize="831,570" sap2010:WorkflowViewState.IdRef="AzureScope_5" SubscriptionId="[Azure_SubscriptionID]" TenantId="[Azure_TenantId]">
        <uaa:AzureScope.Body>
          <ActivityAction x:TypeArguments="uac:AzureCmd">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="uac:AzureCmd" Name="AzureScopePropertyTag" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Azure stop VM - Do" sap:VirtualizedContainerService.HintSize="797,484" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[VM_Object.PowerState.ToString IsNot VmPowerState.Deallocated.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Deallocating.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Stopped.ToString and VM_Object.PowerState.ToString IsNot VmPowerState.Stopping.ToString]" DisplayName="If not already stopped" sap:VirtualizedContainerService.HintSize="755,392" sap2010:WorkflowViewState.IdRef="If_2">
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_8">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <uaa:AzureShutdownVirtualMachine DisplayName="Shutdown VM" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="AzureShutdownVirtualMachine_1" Timeout="[600]" VirtualMachine="[VM_Object]" WaitForCompletion="False" />
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  stopped (guest OS shutdown).&quot;]" />
                  </Sequence>
                </If.Then>
                <If.Else>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_13" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  is not started / running.&quot;]" />
                </If.Else>
              </If>
            </Sequence>
          </ActivityAction>
        </uaa:AzureScope.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </uaa:AzureScope>
      <uaa:AzureScope x:Key="delete" ClientId="[Azure_ClientId]" ClientSecret="[new System.Net.NetworkCredential(&quot;&quot;,Azure_ClientSecret).SecurePassword]" DisplayName="Delete specified VM - Azure Scope" EnvironmentType="Global" sap:VirtualizedContainerService.HintSize="434,331" sap2010:WorkflowViewState.IdRef="AzureScope_1" SubscriptionId="[Azure_SubscriptionID]" TenantId="[Azure_TenantId]">
        <uaa:AzureScope.Body>
          <ActivityAction x:TypeArguments="uac:AzureCmd">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="uac:AzureCmd" Name="AzureScopePropertyTag" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Azure delete VM - Do" sap:VirtualizedContainerService.HintSize="376,245" sap2010:WorkflowViewState.IdRef="Sequence_2">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <uaa:AzureDeleteVirtualMachine DeleteAttachedDisks="True" DeleteAttachedNetworkInterfaces="True" DeleteAttachedNetworkSecurityGroups="True" DeleteAttachedPublicIps="True" DeleteAttachedVirtualNetworks="True" DisplayName="Delete VM" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="AzureDeleteVirtualMachine_1" Timeout="[600]" VirtualMachine="[VM_Object]" WaitForCompletion="False" />
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_14" Level="Info" Message="[&quot;VM  &quot;+VM_Object.Name + &quot;  deleted.&quot;]" />
            </Sequence>
          </ActivityAction>
        </uaa:AzureScope.Body>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </uaa:AzureScope>
    </Switch>
  </Sequence>
</Activity>